# Hookem-banem filter file
# ------------

# You can include other files
include common.conf

# Option:  failregex
# Notes.:  regex to match the password failures messages in the logfile. The
#          host must be matched by a group named "host". The tag "<HOST6>" can
#          be used for standard IP/hostname matching and is only an alias for
#          (?:::f{4,6}:)?(?P<host>[\w\-.^_]+)
# Values:  TEXT
#
failregex = ^sshd\[[0-9]*\]:.*(?:error: PAM: )?Authentication failure for .* from <HOST6>\s*$
failregex = ^sshd\[[0-9]*\]:.*(?:error: PAM: )?User not known to the underlying authentication module for .* from <HOST6>\s*$
failregex = ^sshd\[[0-9]*\]:.*Failed (?:password|publickey) for .* from <HOST6>(?: port \d*)?(?: ssh\d*)?$
failregex = ^sshd\[[0-9]*\]:.*ROOT LOGIN REFUSED.* FROM <HOST6>\s*$
failregex = ^sshd\[[0-9]*\]:.*[iI](?:llegal|nvalid) user .* from <HOST6>\s*$
failregex = ^sshd\[[0-9]*\]:.*User .+ from <HOST6> not allowed because not listed in AllowUsers$
failregex = ^sshd\[[0-9]*\]:.*authentication failure; logname=\S* uid=\S* euid=\S* tty=\S* ruser=\S* rhost=<HOST6>(?:\s+user=.*)?\s*$
failregex = ^sshd\[[0-9]*\]:.*refused connect from \S+ \(<HOST6>\)\s*$
failregex = ^sshd\[[0-9]*\]:.*Address <HOST6> .* POSSIBLE BREAK-IN ATTEMPT!*\s*$
failregex = ^sshd\[[0-9]*\]:.*User .+ from <HOST6> not allowed because none of user's groups are listed in AllowGroups\s*$
failregex = ^sshd\[[0-9]*\]:.*error: maximum authentication attempts exceeded for .* from <HOST6>

# Each match will increase the hit counter by one, so to add a quicker block you can add the line multiple times
#   Note these 2 + the Failed password|publickey line will make a total of 3 hits
failregex = ^sshd\[[0-9]*\]: Failed password for invalid user .* from <HOST6> port
failregex = ^sshd\[[0-9]*\]: Failed password for invalid user .* from <HOST6> port


# You can also look for a squence of patterns by adding a suffix
#failregex_tst1 = test line 1
#failregex_tst1 = test line 2
#failregex_tst2 = test step 2

#failregex_whack1 = test line 1
#failregex_whack2 = second test line 1
#failregex_whack2 = second test line 2

#failregex_tree2 = trees are misplaced

# Option:   ipregex
# Notes:    regex to use to determine the IP from a line before doing any may matches
#           needed when a line maybe part way through a sequence
ipregex = ^sshd\[[0-9]*\]:.*.*(from|FROM)\s+<HOST6>
ipregex = ^sshd\[[0-9]*\]:.*.*(from|FROM) \S+ \(<HOST6>\)
ipregex = ^sshd\[[0-9]*\]:.*.*rhost=<HOST6>
